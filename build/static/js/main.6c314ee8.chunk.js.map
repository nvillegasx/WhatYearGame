{"version":3,"sources":["hash.js","Player.js","config.js","App.js","serviceWorker.js","index.js"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","Player","removeDuplicateAblums","albums","filter","album","i","findIndex","t","name","setAlbum","remainingRounds","state","gameList","length","selectedIndex","getRandomIndex","gameType","setState","selectedAlbum","track","updateValidAlbums","gameOver","listSize","Math","floor","random","index","newList","splice","displayButtons","gameStart","className","onClick","startGame","checkUserAnswer","setUserInput","year","userInput","albumYear","release_date","newCorrect","numOfCorrect","totalAnswered","toast","success","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","error","warning","restartGame","originalList","this","props","data","style","height","width","alt","src","images","url","type","required","value","minLength","min","max","onChange","e","target","goToMainMenu","Component","scopes","App","selectGamePlay","getGameData","console","log","token","axios","method","headers","then","response","items","retrievedData","setPlaylistInfo","playlistInfo","playlistHref","displayPlaylists","map","playlist","class","id","href","for","submitSelectedPlaylist","tracks","selectedPlaylist","_token","access_token","color","icon","faSpotify","size","join","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6c314ee8.chunk.js","sourcesContent":["// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","import React, { Component } from 'react'\nimport { toast } from 'react-toastify';\n\nclass Player extends Component {\n  constructor() {\n    super();\n    this.state = {\n      gameList: [],\n      originalList: [],\n      selectedAlbum: null,\n      gameStart: true,\n      userInput: \"\",\n      gameOver: false,\n      numOfCorrect: 0,\n      totalAnswered: 0,\n      gameType: \"\"\n    };\n  }\n  componentDidMount (){\n    if(this.props.data.length > 0)\n    {\n      // let albums = this.removeDuplicateAblums(this.props.data)\n        this.setState({ \n          gameList: this.props.data,\n          originalList: this.props.data,\n          gameType: this.props.gameType\n        })\n      this.setAlbum()\n\n      if(this.state.originalList.length === 0 && this.props.data.length !== 0)\n        this.setState({ \n          gameOver: false,\n          originalList: this.props.data })\n    }\n  }\n\n  // to do fix this to remove duplicates\n  removeDuplicateAblums = (albums) => {\n    let noDuplicateAlbums = albums.filter((album,i,albums)=>\n    albums.findIndex(t=>(t.album.name === album.album.name))===i)\n    debugger;\n    return noDuplicateAlbums\n  }\n\n  // sets up the data to play the game\n  setAlbum = () => {\n    let remainingRounds = this.state.gameList.length\n\n    if( remainingRounds > 0)\n    {\n      let selectedIndex = this.getRandomIndex(remainingRounds)\n\n      if(this.state.gameType === \"albums\")\n        this.setState({ selectedAlbum: this.state.gameList[selectedIndex].album})\n      else\n        this.setState({ selectedAlbum: this.state.gameList[selectedIndex].track.album})\n  \n      this.updateValidAlbums(selectedIndex)\n    }\n    else{\n      this.setState({ gameOver: true})\n    }\n\n  }\n\n  // gets a random index to the the item to be displayed\n  getRandomIndex = (listSize) =>{\n    return Math.floor(Math.random() * listSize)\n  }\n\n  // update the data that the user has no answered\n  updateValidAlbums = (index) => {\n    let newList = this.state.gameList\n    newList.splice(index, 1)\n    this.setState({ gameList: newList})\n  }\n\n  // displays the buttons for the user to submit answer, end game, and sets up game\n  displayButtons = () => {\n    if(this.state.gameStart === true)\n    {\n      return <div>\n        <div className=\"\">\n          <button className=\"btn btn-block btn-success btn-lg\" onClick={()=>this.startGame()}>Start Game</button>\n        </div>\n      </div>\n    }\n    else{\n      return <div>\n        <button className=\"btn btn-success btn-lg\" onClick={()=>this.checkUserAnswer()}>Submit</button>\n        <button className=\"btn btn-danger btn-lg\" onClick={()=> this.setState({ gameOver: true})}>End Game</button>\n      </div>\n    }\n  }\n\n  // sets up the game by choosing the first item/question to display to the user\n  startGame = () => {\n    this.setAlbum()\n    if(this.state.gameStart === true)\n    {\n      this.setState({gameStart: false})\n    }\n  }\n\n  // saves the users response\n  setUserInput = (year) => {\n    this.setState({ userInput: year})\n  }\n\n  // validates the users answer and displays whether the user is correct or not\n  checkUserAnswer = () =>{\n    const albumYear = this.state.selectedAlbum.release_date.substring(0,4)\n    let newCorrect = this.state.numOfCorrect\n    let totalAnswered = this.state.totalAnswered\n    \n    if(this.state.userInput === \"\" || this.state.userInput.length !== 4)\n    {\n      toast.warning(`Error, please enter a year after 1500`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        });\n\n        return;\n    }\n\n    if(this.state.userInput === albumYear)\n    {\n      this.setState({ numOfCorrect: newCorrect+1 })\n      toast.success(`Correct! The album was released in ${albumYear}`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        });\n    }\n    else{\n      toast.error(`Incorrect! The album was released in ${albumYear}`, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        });\n    }\n\n    this.setAlbum()\n    this.setState({userInput: \"\", totalAnswered: totalAnswered+1})\n  }\n\n  // allows the user to play again\n  restartGame = () => {\n    debugger;\n    this.setState({\n      selectedAlbum: null,\n      gameStart: false,\n      gameList: this.state.originalList, \n      gameType: this.state.gameType,\n      userInput: \"\",\n      gameOver: false,\n      numOfCorrect: 0,\n      totalAnswered: 0,\n    })\n\n    if(this.state.gameList.length > 0)\n      this.setAlbum()\n    \n  }\n\n  render() {\n    return (\n      <div className=\"center\" style={{height: \"500px\", width: \"300px\"}}>\n        <div>\n          <div className=\"center\" style={{width: \"300px\"}}>\n              { !this.state.gameOver\n              && this.state.selectedAlbum\n              &&\n              <div>\n                <div className=\"row\">\n                  <div style={{width: \"500px\"}}>\n                    <img alt=\"album\" src={this.state.selectedAlbum.images[0].url} />\n                  </div>\n\n                  <div>\n                    <label name=\"userInput\">What year was this ablum released?</label>\n                    <input type=\"number\" name=\"userInput\"required  value={this.state.userInput} minLength=\"4\" min=\"1500\" max=\"2020\" onChange={((e)=>this.setUserInput(e.target.value))}></input>\n                  </div>\n                </div>\n              </div> \n              }\n\n              {\n               !this.state.gameOver && this.state.gameList !== undefined && this.displayButtons()\n              }\n\n              {\n                this.state.gameOver &&\n                <div>\n                  <h2>Game Over</h2>\n                  <div> Stats:\n                    {this.state.numOfCorrect} out of {this.state.totalAnswered}\n                    <br/>\n                    <button className=\"btn btn-success btn-lg\" onClick={() => this.restartGame()}>Play Again</button>\n                    <button className=\"btn btn-danger btn-lg\" onClick={this.props.goToMainMenu}>Main Menu</button>\n\n                  </div>\n                </div>\n              }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Player;\n","export const authEndpoint = 'https://accounts.spotify.com/authorize';\n// Replace with your app's client ID, redirect URI and desired scopes\nexport const clientId = \"0a341ef431f043cfbc7b9415b780d3b0\";\n// replace this when uploaded to github pages\nexport const redirectUri = \"https://nvillegasx.github.io/WhatYearGame/\";\nexport const scopes = [\n  \"user-read-currently-playing\",\n  \"user-read-playback-state\",\n  \"playlist-read-private\",\n  \"user-library-read\"\n];","import React, {\n  Component\n} from \"react\";\nimport hash from \"./hash\";\nimport \"./App.css\";\nimport Player from \"./Player\"\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport axios from \"axios\"\nimport { FontAwesomeIcon, } from '@fortawesome/react-fontawesome'\nimport { faSpotify, } from '@fortawesome/free-brands-svg-icons'\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nclass App extends Component {\n  constructor() {\n      super();\n      this.state = {\n        token: null,\n        data: [],\n        gameType: \"\",\n        retrievedData: false,\n        selectedPlaylist: \"\",\n        playlistHref: \"\",\n    };\n  }\n\n  // Stores the token to make the API call to Spotify\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n    }\n  }\n\n  // Gets the data based on the game type the user selected\n  // If playlist is chosen the user will get another option to \n  // select the playlist they would like to use\n  selectGamePlay = (gameType) => {\n    this.setState({ gameType })\n    if(gameType === \"albums\")\n      this.getGameData('albums?limit=50')\n    else\n      this.getGameData(`${gameType}`)\n\n  }\n\n  // API call to spotify to retrieve the data to play the game\n  getGameData = (url) => {\n    console.log(this.state.token)\n    console.log(url)\n    axios({\n      url: `https://api.spotify.com/v1/me/${url}`,\n      method: 'get',\n      headers: { \n        'Authorization': 'Bearer ' + this.state.token,\n        'Content-Type' : 'application/json'\n      }\n    }).then((response) => {\n      if(this.state.gameType !== \"playlists\")\n      {\n        this.setState({ \n          data: response.data.items,\n          retrievedData: true\n        })\n      }\n      else{\n        this.setState({ \n          data: response.data.items,\n        })\n      }\n    }\n    )\n  }\n\n  setPlaylistInfo = (playlistInfo) => {\n    this.setState({ playlistHref: playlistInfo.target.value})\n  }\n\n  displayPlaylists = () => {\n    return this.state.data.map((playlist) => (\n      <div class=\"\">\n        <input class=\"\" type=\"radio\" name=\"playlist\" id={playlist.name} value={playlist.href} onClick={(e)=>this.setPlaylistInfo(e)}/>\n        {/* fix when clicking on the name it goes to first check box */}\n        <label class=\"playlistName\" for={playlist.name}>\n        {playlist.name}\n        </label>\n      </div>\n    ))\n  }\n\n  \n\n  submitSelectedPlaylist = () => {\n    axios({\n      url: this.state.playlistHref,\n      method: 'get',\n      headers: { \n        'Authorization': 'Bearer ' + this.state.token,\n        'Content-Type' : 'application/json'\n      }\n    }).then((response) => {\n      this.setState({ \n        data: response.data.tracks.items,\n        retrievedData: true\n      })\n    })\n  }\n\n  goToMainMenu = () => {\n    this.setState({ data: [], retrievedData: false })\n  }\n\n  render() {\n    return ( \n      <div className=\"App\">\n          <nav className=\"navbar navbar-default\">\n            <span className=\"navbar-brand mb-0 h1\" style={{color: \"white\"}}><h1>Guess That Year!</h1></span>\n          </nav>\n          <div>\n          <ToastContainer />\n        </div>\n          {\n            !this.state.token && ( \n              <div className=\"center\">\n                <FontAwesomeIcon icon={faSpotify} size=\"10x\" />\n                <div className=\"center\">\n                  <div style={{width: \"100%\"}}>\n                    <h4>Guess That Year is a game that uses Spotify's Api to display\n                    album covers from a user's saved albums, playlists or liked songs. The objective of \n                    the game is to guess what year the album was released. How well\n                    do you know your music?<br/><br/>\n                    <small>\n                    Note: To play the game a user must have a Spotify account.\n                    </small>\n                    </h4>\n                    \n                    <a className = \"btn btn-primary btn--loginApp-link\"\n                      href = {\n                        `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`\n                      } >\n                    Login to Spotify </a>\n                  </div>\n                </div>\n              </div>\n              )\n            } \n\n          {\n            this.state.token\n            && this.state.data.length === 0\n            &&\n            (<div className=\"container center\">\n              <h2>Choose what you would like to use to play the game:</h2>\n              <small>\n                    Note: The user must have saved albums, liked songs or created playlist.\n                    </small>\n              <div className=\"row\">\n                {/* /v1/albums */}\n                <div className=\"col-lg colButton\" onClick={() => this.selectGamePlay(\"albums\")}>\n                  <h2>Albums</h2>\n                </div>\n                {/* /v1/me/tracks */}\n                <div className=\"col-lg colButton\" onClick={() => this.selectGamePlay(\"tracks\")}>\n                  <h2>\n                    Liked Songs\n                  </h2>\n                </div>\n              </div>\n              <div className=\"row\">\n                {/* /v1/me/playlists */}\n                <div className=\"col-lg colButton\" onClick={() => this.selectGamePlay(\"playlists\")}>\n                  <h2>\n                    Playlists\n                  </h2>\n                </div>\n              </div>\n            </div>)\n          }\n          {\n            this.state.data.length !== 0\n            && this.state.gameType === \"playlists\"\n            && !this.state.retrievedData\n            &&\n            (\n              <div>\n                <h1>Select a playlist:</h1>\n                {this.displayPlaylists()}\n                <br/>\n                <button className=\"btn btn-lg btn-success\" onClick={() => this.submitSelectedPlaylist()}>Submit</button>\n              </div>\n            )\n          }\n          {\n            this.state.retrievedData\n            && this.state.data.length === 0\n            && \n            (\n              <h1>Unable to play no saved data.</h1>\n            )\n          }\n          {\n            this.state.token \n            && this.state.data.length !== 0\n            && this.state.retrievedData\n            && (\n              <div>\n\n                <Player\n                  data={this.state.data}\n                  gameType={this.state.gameType}\n                  goToMainMenu={this.goToMainMenu}\n                  />\n                </div>\n            )\n          }\n\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}